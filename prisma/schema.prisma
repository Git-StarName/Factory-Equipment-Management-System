// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(OPERATOR)
  avatar    String?
  phone     String?
  department String?
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  equipment    Equipment[]
  faults       Fault[]
  maintenance  Maintenance[]
  notifications Notification[]

  @@map("users")
}

model Equipment {
  id          String    @id @default(cuid())
  name        String
  model       String
  serialNumber String   @unique
  type        EquipmentType
  status      EquipmentStatus @default(ACTIVE)
  location    String
  purchaseDate DateTime
  warrantyDate DateTime?
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  manufacturer String?
  specifications Json?
  image       String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  faults      Fault[]
  maintenance Maintenance[]
  notifications Notification[]

  @@map("equipment")
}

model Fault {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  severity    FaultSeverity
  status      FaultStatus @default(OPEN)
  reportedAt  DateTime    @default(now())
  resolvedAt  DateTime?
  solution    String?     @db.Text
  notes       String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  reporterId  String
  reporter    User      @relation(fields: [reporterId], references: [id])
  maintenance Maintenance[]
  notifications Notification[]

  @@map("faults")
}

model Maintenance {
  id          String      @id @default(cuid())
  type        MaintenanceType
  title       String
  description String      @db.Text
  scheduledDate DateTime
  completedDate DateTime?
  status      MaintenanceStatus @default(SCHEDULED)
  cost        Float?
  notes       String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  assignedToId String
  assignedTo  User      @relation(fields: [assignedToId], references: [id])
  faultId     String?
  fault       Fault?    @relation(fields: [faultId], references: [id])
  notifications Notification[]

  @@map("maintenance")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  createdAt DateTime @default(now())
  readAt    DateTime?

  // Relations
  userId       String?
  user         User?       @relation(fields: [userId], references: [id])
  equipmentId  String?
  equipment    Equipment?  @relation(fields: [equipmentId], references: [id])
  faultId      String?
  fault        Fault?      @relation(fields: [faultId], references: [id])
  maintenanceId String?
  maintenance  Maintenance? @relation(fields: [maintenanceId], references: [id])

  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  OPERATOR
  MAINTENANCE
  MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum EquipmentType {
  PRODUCTION
  QUALITY
  SAFETY
  ENVIRONMENTAL
  UTILITY
  OTHER
}

enum EquipmentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  FAULT
  RETIRED
}

enum FaultSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FaultStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  PREDICTIVE
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  SYSTEM
  FAULT
  MAINTENANCE
  EQUIPMENT
  USER
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}